#!/usr/bin/env python3
"""
Script de setup para o projeto CS2 Skins Price Collector & Analysis
Execute este script na nova m√°quina para configurar o ambiente.
"""

import subprocess
import sys
import os
from pathlib import Path

def run_command(command, description):
    """Executa um comando e mostra o resultado"""
    print(f"\nüîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} conclu√≠do com sucesso!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao {description.lower()}:")
        print(f"   Comando: {command}")
        print(f"   Erro: {e.stderr}")
        return False

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    print("üêç Verificando vers√£o do Python...")
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print(f"‚ùå Python {version.major}.{version.minor} detectado. Python 3.8+ √© necess√°rio.")
        return False
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} detectado.")
    return True

def install_dependencies():
    """Instala as depend√™ncias do projeto"""
    print("\nüì¶ Instalando depend√™ncias...")
    
    # Atualiza pip primeiro
    if not run_command("python -m pip install --upgrade pip", "Atualizando pip"):
        return False
    
    # Instala as depend√™ncias
    if not run_command("pip install -r requirements.txt", "Instalando depend√™ncias do requirements.txt"):
        return False
    
    return True

def create_directories():
    """Cria diret√≥rios necess√°rios se n√£o existirem"""
    print("\nüìÅ Criando diret√≥rios necess√°rios...")
    
    directories = [
        "data",
        "logs",
        "notebooks"
    ]
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"‚úÖ Diret√≥rio '{directory}' verificado/criado")

def verify_files():
    """Verifica se os arquivos essenciais existem"""
    print("\nüìã Verificando arquivos essenciais...")
    
    essential_files = [
        "requirements.txt",
        "README.md",
        "solucao_definitiva.py",
        "baixar_market_hash_names.py",
        "monitor_coleta.py",
        "analise_dados_coletados.py",
        "dashboard_monitoramento.py"
    ]
    
    missing_files = []
    for file in essential_files:
        if Path(file).exists():
            print(f"‚úÖ {file}")
        else:
            print(f"‚ùå {file} (FALTANDO)")
            missing_files.append(file)
    
    if missing_files:
        print(f"\n‚ö†Ô∏è  Arquivos faltando: {', '.join(missing_files)}")
        return False
    
    return True

def main():
    """Fun√ß√£o principal do setup"""
    print("üöÄ Setup do Projeto CS2 Skins Price Collector & Analysis")
    print("=" * 60)
    
    # Verifica vers√£o do Python
    if not check_python_version():
        print("\n‚ùå Setup interrompido devido a incompatibilidade de vers√£o.")
        return False
    
    # Verifica arquivos essenciais
    if not verify_files():
        print("\n‚ùå Setup interrompido devido a arquivos faltando.")
        return False
    
    # Cria diret√≥rios
    create_directories()
    
    # Instala depend√™ncias
    if not install_dependencies():
        print("\n‚ùå Setup interrompido devido a erro na instala√ß√£o de depend√™ncias.")
        return False
    
    print("\n" + "=" * 60)
    print("üéâ Setup conclu√≠do com sucesso!")
    print("\nüìñ Pr√≥ximos passos:")
    print("1. Execute: python baixar_market_hash_names.py")
    print("2. Execute: python solucao_definitiva.py")
    print("3. Para monitorar: python monitor_coleta.py")
    print("4. Para dashboard: streamlit run dashboard_monitoramento.py")
    print("\nüìö Consulte o README.md para mais informa√ß√µes.")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 